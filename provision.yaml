---
- name: Clone VM template 
  hosts: all
  serial: 1
  gather_facts: no
  
  vars_files:
    - .majikmike
    - config.yaml

  tasks:

  - name: Print out vars
    debug:
      msg: "{{ inventory_hostname }}: {{ ip_address }}/{{ ip_mask }} {{ gateway }}"

  - name:  Clone a virtual machine from Linux template and customization
    community.vmware.vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter }}"
      state: present
      folder: "{{ folder }}"
      template: "{{ template }}"
      name: "{{ inventory_hostname }}"
      networks:
        - name: "{{ network_vlan }}"
          type: static
          ip: "{{ ip_address }}"
          netmask: "{{ ip_mask }}"
          gateway: "{{ gateway }}"
          start_connected: yes
          connected: yes
      wait_for_ip_address: true
      customization:
        hostname: "{{ inventory_hostname }}"
        domain: "{{ domain }}"
        dns_servers:
          - 192.168.2.105
        dns_suffix:
          - lab.integrate.zone
    delegate_to: localhost
    register: newvm

  - name: Confirm that we cloned the virtual machine successfully located in "{{ datacenter }} in {{ folder }}"
    community.vmware.vmware_guest_info:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter }}"
      folder: "{{ folder }}"
      name: "{{ inventory_hostname }}"
    delegate_to: localhost
    register: vm_guest_info

  - name: Register to satellite if its available
    when: bootstrap_foreman_fqdn != none
    block:
      - name: Confirm "{{ inventory_hostname }}" is available and print out the status
        debug: 
          msg: "{{ inventory_hostname }}: powered state: {{ vm_guest_info.instance.hw_power_status }} uuid: {{ vm_guest_info.instance.instance_uuid }}"

      - name: download bootstrap.py from {{ bootstrap_foreman_fqdn }}
        get_url:
          dest: "{{ bootstrap_target_path }}"
          url: "{{ bootstrap_download_method }}://{{ bootstrap_foreman_fqdn }}/pub/bootstrap.py"
        when: not bootstrap_local_copy

      - name: copy bootstrap.py from local machine
        copy:
          dest: "{{ bootstrap_target_path }}"
          src: bootstrap.py
        when: bootstrap_local_copy

      - name: generate bootstrap.py arguments
        set_fact:
          bootstrap_args: "--server {{ bootstrap_foreman_fqdn }} --organization '{{ bootstrap_org }}' --location '{{ bootstrap_location }}' --activationkey '{{ bootstrap_activationkey }}' --download-method {{ bootstrap_download_method }}"
          bootstrap_foreman_args: "{% if bootstrap_password != '' %}--login '{{ bootstrap_login }}' --password '{{ bootstrap_password }}' --hostgroup '{{ bootstrap_hostgroup }}'{% else %}--skip foreman{% endif %}"

      - name: run bootstrap.py
        command: "/usr/libexec/platform-python {{ bootstrap_target_path }} {{ bootstrap_args }} {{ bootstrap_foreman_args }} {{ bootstrap_additional_args }} --force "

      - name: remove bootstrap.py
        file:
          path: "{{ bootstrap_target_path }}"
